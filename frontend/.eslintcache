[{"C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\index.tsx":"1","C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\App.tsx":"3","C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\Header.tsx":"4","C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\Icons.tsx":"5","C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\HomePage.tsx":"6","C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\QuestionsData.ts":"7","C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\QuestionList.tsx":"8","C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\Question.tsx":"9","C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\PageTitle.tsx":"10","C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\Page.tsx":"11","C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\Styles.ts":"12","C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\SearchPage.tsx":"13","C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\AskPage.tsx":"14","C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\SignInPage.tsx":"15","C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\NotFoundPage.tsx":"16","C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\QuestionPage.tsx":"17","C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\AnswerList.tsx":"18","C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\Answer.tsx":"19"},{"size":518,"mtime":1622335975598,"results":"20","hashOfConfig":"21"},{"size":440,"mtime":1622335975598,"results":"22","hashOfConfig":"21"},{"size":1688,"mtime":1622335975593,"results":"23","hashOfConfig":"21"},{"size":2483,"mtime":1634420627479,"results":"24","hashOfConfig":"21"},{"size":290,"mtime":1622335975595,"results":"25","hashOfConfig":"21"},{"size":1464,"mtime":1622335975594,"results":"26","hashOfConfig":"21"},{"size":2127,"mtime":1622335975596,"results":"27","hashOfConfig":"21"},{"size":1071,"mtime":1622335975596,"results":"28","hashOfConfig":"21"},{"size":1204,"mtime":1622335975596,"results":"29","hashOfConfig":"21"},{"size":420,"mtime":1622335975595,"results":"30","hashOfConfig":"21"},{"size":478,"mtime":1622335975595,"results":"31","hashOfConfig":"21"},{"size":2305,"mtime":1634253883776,"results":"32","hashOfConfig":"21"},{"size":1076,"mtime":1622335975597,"results":"33","hashOfConfig":"21"},{"size":1900,"mtime":1634430910289,"results":"34","hashOfConfig":"21"},{"size":132,"mtime":1622335975597,"results":"35","hashOfConfig":"21"},{"size":141,"mtime":1622335975595,"results":"36","hashOfConfig":"21"},{"size":3521,"mtime":1634430657249,"results":"37","hashOfConfig":"21"},{"size":653,"mtime":1622335975593,"results":"38","hashOfConfig":"21"},{"size":763,"mtime":1622335975593,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"lkqjme",{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\index.tsx",[],["80","81"],"C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\App.tsx",[],"C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\Header.tsx",[],"C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\Icons.tsx",[],"C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\HomePage.tsx",[],"C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\QuestionsData.ts",[],"C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\QuestionList.tsx",[],"C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\Question.tsx",[],"C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\PageTitle.tsx",[],"C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\Page.tsx",[],"C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\Styles.ts",[],"C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\SearchPage.tsx",[],"C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\AskPage.tsx",[],"C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\SignInPage.tsx",[],"C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\NotFoundPage.tsx",[],"C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\QuestionPage.tsx",["82"],"/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport {\r\n  gray3,\r\n  gray6,\r\n  Fieldset,\r\n  FieldContainer,\r\n  FieldLabel,\r\n  FieldTextArea,\r\n  FormButtonContainer,\r\n  PrimaryButton,\r\n  FieldError,\r\n} from './Styles';\r\n\r\nimport React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { Page } from './Page';\r\nimport { useParams } from 'react-router-dom';\r\nimport { QuestionData, getQuestion } from './QuestionsData';\r\nimport { AnswerList } from './AnswerList';\r\nimport { type } from 'os';\r\n\r\ntype FormData = {\r\n  content: string;\r\n};\r\n\r\nexport const QuestionPage = () => {\r\n  const [question, setQuestion] = React.useState<QuestionData | null>(null);\r\n\r\n  const { questionId } = useParams();\r\n\r\n  React.useEffect(() => {\r\n    const doGetQuestion = async (questionId: number) => {\r\n      const foundQuestion = await getQuestion(questionId);\r\n      setQuestion(foundQuestion);\r\n    };\r\n    if (questionId) {\r\n      doGetQuestion(Number(questionId));\r\n    }\r\n  }, [questionId]);\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n  } = useForm<FormData>();\r\n  return (\r\n    <Page>\r\n      <div\r\n        css={css`\r\n          background-color: white;\r\n          padding: 15px 20px 20px 20px;\r\n          border-radius: 4px;\r\n          border: 1px solid ${gray6};\r\n          box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\r\n        `}\r\n      >\r\n        <div\r\n          css={css`\r\n            font-size: 19px;\r\n            font-weight: bold;\r\n            margin: 10px 0px 5px;\r\n          `}\r\n        >\r\n          {question === null ? '' : question.title}\r\n        </div>\r\n        {question !== null && (\r\n          <React.Fragment>\r\n            <p\r\n              css={css`\r\n                margin-top: 0px;\r\n                background-color: white;\r\n              `}\r\n            >\r\n              {question.content}\r\n            </p>\r\n            <div\r\n              css={css`\r\n                font-size: 12px;\r\n                font-style: italic;\r\n                color: ${gray3};\r\n              `}\r\n            >\r\n              {`Asked by ${question.userName} on\r\n  ${question.created.toLocaleDateString()} \r\n  ${question.created.toLocaleTimeString()}`}\r\n            </div>\r\n            <AnswerList data={question.answers} />\r\n            <form\r\n              css={css`\r\n                margin-top: 20px;\r\n              `}\r\n            >\r\n              <Fieldset>\r\n                <FieldContainer>\r\n                  <FieldLabel htmlFor=\"content\">Your Answer</FieldLabel>\r\n                  <FieldTextArea\r\n                    id=\"content\"\r\n                    name=\"content\"\r\n                    required={true}\r\n                    minLength={50}\r\n                    {...register}\r\n                  />\r\n                  {errors.content && errors.content.type === 'required' && (\r\n                    <FieldError>You must enter the answer</FieldError>\r\n                  )}\r\n                  {errors.content && errors.content.type === 'minLength' && (\r\n                    <FieldError>\r\n                      The answer must be at least 50 characters\r\n                    </FieldError>\r\n                  )}\r\n                </FieldContainer>\r\n                <FormButtonContainer>\r\n                  <PrimaryButton type=\"submit\">\r\n                    Submit Your Answer\r\n                  </PrimaryButton>\r\n                </FormButtonContainer>\r\n              </Fieldset>\r\n            </form>\r\n          </React.Fragment>\r\n        )}\r\n      </div>\r\n    </Page>\r\n  );\r\n};\r\n","C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\AnswerList.tsx",[],"C:\\Users\\cfmde\\source\\repos\\code\\QandA\\frontend\\src\\Answer.tsx",[],{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":21,"column":10,"nodeType":"89","messageId":"90","endLine":21,"endColumn":14},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"@typescript-eslint/no-unused-vars","'type' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]